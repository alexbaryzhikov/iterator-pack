package com.alexb.iterators;

import java.util.Iterator;
import java.util.NoSuchElementException;

/**
 * Generates proper divisors of the input number.
 * <p>
 * Divisors are generated by symmetric pairs rather than in natural order.
 * <p>
 * 6 -> 1 2 3 <br>
 * 12 -> 1 2 6 3 4
 */
public class DivisorsIterator implements Iterator<Long> {
    private final long n;
    private final long sqrtN;
    private long i = 1;
    private long j = 0;

    /**
     * @param n the input number, assumed to be positive
     */
    public DivisorsIterator(long n) {
        this.n = n;
        this.sqrtN = (long) Math.sqrt(n);
        if (n == 1) {
            i = Long.MAX_VALUE; // 1 has no proper divisors
        }
    }

    @Override
    public boolean hasNext() {
        return i <= sqrtN || j != 0;
    }

    @Override
    public Long next() {
        if (i > sqrtN && j == 0) {
            throw new NoSuchElementException();
        }
        long result;
        if (j == 0) {
            result = i;
            j = n / i;
            if (j == n || j == i) {
                j = 0;
            }
            do {
                i++;
            } while (n % i != 0 && i <= sqrtN);
        } else {
            result = j;
            j = 0;
        }
        return result;
    }
}
